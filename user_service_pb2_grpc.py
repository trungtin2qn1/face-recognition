# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import user_service_pb2 as user__service__pb2


class UserServiceStub(object):
    """UserService ...
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.insert = channel.unary_unary(
                '/protobuf.UserService/insert',
                request_serializer=user__service__pb2.InsertRequest.SerializeToString,
                response_deserializer=user__service__pb2.InsertResponse.FromString,
                )
        self.getAll = channel.unary_unary(
                '/protobuf.UserService/getAll',
                request_serializer=user__service__pb2.GetAllRequest.SerializeToString,
                response_deserializer=user__service__pb2.GetAllResponse.FromString,
                )
        self.getByID = channel.unary_unary(
                '/protobuf.UserService/getByID',
                request_serializer=user__service__pb2.GetByIDRequest.SerializeToString,
                response_deserializer=user__service__pb2.GetByIDResponse.FromString,
                )


class UserServiceServicer(object):
    """UserService ...
    """

    def insert(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAll(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByID(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'insert': grpc.unary_unary_rpc_method_handler(
                    servicer.insert,
                    request_deserializer=user__service__pb2.InsertRequest.FromString,
                    response_serializer=user__service__pb2.InsertResponse.SerializeToString,
            ),
            'getAll': grpc.unary_unary_rpc_method_handler(
                    servicer.getAll,
                    request_deserializer=user__service__pb2.GetAllRequest.FromString,
                    response_serializer=user__service__pb2.GetAllResponse.SerializeToString,
            ),
            'getByID': grpc.unary_unary_rpc_method_handler(
                    servicer.getByID,
                    request_deserializer=user__service__pb2.GetByIDRequest.FromString,
                    response_serializer=user__service__pb2.GetByIDResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protobuf.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """UserService ...
    """

    @staticmethod
    def insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protobuf.UserService/insert',
            user__service__pb2.InsertRequest.SerializeToString,
            user__service__pb2.InsertResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protobuf.UserService/getAll',
            user__service__pb2.GetAllRequest.SerializeToString,
            user__service__pb2.GetAllResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protobuf.UserService/getByID',
            user__service__pb2.GetByIDRequest.SerializeToString,
            user__service__pb2.GetByIDResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
